<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大学</title>
      <link href="/2023/04/14/%E5%A4%A7%E5%AD%A6/"/>
      <url>/2023/04/14/%E5%A4%A7%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<pre><code>注意，大学期间你可能感到迷茫，当你始终记住一句话，做自己的事情，谋自己的规划，各自有各自赚钱的手段，</code></pre><p>如果有几个交心的朋友是一件很不错的事情但是最主要的还是自己<br>学习方面，不要愚昧的追求像高中时候一样的死读，拼读，没有自己的事情或者事业的情况下可以，<br>但是还是希望能够找到自己感兴趣的事情去做，适应自己的学习情况，保证自己的学业不可以落下，<br>多讲求让自己高效率的完成事情，专心的去做事情，多方向的发展，当你对学习的东西感到很痛苦不解的时候，<br>不妨先<code>“模糊式学习”</code>知道学习的东西的大概框架结构，再一步步对不懂的地方进行细节部分的补充，转变方式<br>明白社会，这时候的你几年之后就要出到社会，这个阶段是你和社会对接的阶段，不能一味的“学生性思维”,<br><code>避免信息闭塞，但一切的根本是讲求于效率！效率！效率！专注！专注！专注！</code><br>感情上的一切不在是那么的单纯，但也不排除有，这时候靠的是自己的表达能力，人格魅力吸引对方，<br>浪漫也只是在这个基础上的锦上添花，是别人想给你的感觉，并不是你自己给自己的个人安慰，不要把自己在别人那边的地位想的太好，<br>没有什么比钱更有说服力的，别和社会关系脱节。<br>刚开始进入大学，很多东西对于你来说都是新鲜的，有兴趣都可以去尝试一下，但是你要明白自己想要的是什么，是体验一下也好，<br>不过不要玩的太深，这些都是你人生中的一小部分而已</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>婧哥</title>
      <link href="/2023/01/27/%E5%B0%8F%E5%A9%A7/"/>
      <url>/2023/01/27/%E5%B0%8F%E5%A9%A7/</url>
      
        <content type="html"><![CDATA[<center><h4 id="喜欢"><a href="#喜欢" class="headerlink" title="喜欢"></a>喜欢</h4><p> 今年才跟你接触，能给你拍照是我的荣幸我也真的开心，虽然我知道我拍的不够让你满意，但是我尽力了，第一次给女孩子拍照，不大会，甚至我知道后面我再看会现在拍的照片会觉得很烂，后面我拍的不错了，我想我会从新再给你拍一组写真。</p></center><!-- ![让我拍摄稍微有点信心的第一张图](../_posts/小婧/微信图片_20230127120105.jpg) --><!-- 这里本来是有一张你的照片的，但是hexo框架还是这个主题的问题，这个照片渲染不上浏览器 --><h4 id="对于你"><a href="#对于你" class="headerlink" title="对于你"></a>对于你</h4><p>就我基本上很多时候第一反应都是跟着感觉走的，你给我的感觉就是<strong>你很特别</strong>，你有自己的看法对于事情，讲真，我挺羡慕你的男朋友的，心里面不难受是假的，但也没有太大的关系，毕竟他也有他优秀的点，我也会努力做好自己的优点，不断的成长，你老妈说我们是“青梅竹马”？？？但是我觉得确切来说是发小吧。</p><p>今年过年，跑去大旗山庙里，拜神，现实一点，我们不可能的事情，我也意识到这一点（这里又是在那里狗屁乱说）…….（4.14号补上去：唉，其实感觉可不可能好像已经没有太大关系了，最主要还是喜欢你的这个过程就还行）</p><h4 id="这里在胡说八道讲屁话（删了）"><a href="#这里在胡说八道讲屁话（删了）" class="headerlink" title="这里在胡说八道讲屁话（删了）"></a>这里在胡说八道讲屁话（删了）</h4><p>不谈论那些狗屁不通的话，开始造</p><center><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4></center>我想了想，我喜欢你，也不是要一定和你在一起才是ok的，其实他对你好，你开心就挺好的，做人嘞，最紧要是开心啦！<blockquote><p>但是吧，原谅我还是有点私心的，还是希望你能做我女朋友，如果可以：</p></blockquote><figure class="highlight c++"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">I_want_say</span><span class="params">(<span class="type">bool</span> value)</span> </span>{</span><br><span class="line">    <span class="type">bool</span> this_love = value;</span><br><span class="line">    <span class="comment">//这个问题涉及到两个人，无非就是我和你</span></span><br><span class="line">    <span class="type">static</span> string Liu_bo = <span class="string">"I"</span>;</span><br><span class="line">    <span class="type">static</span> string Xiao_jing = <span class="string">"Xiaojing"</span>;</span><br><span class="line">    <span class="comment">//看看这份爱是不是真的</span></span><br><span class="line">    <span class="keyword">if</span> (this_love == <span class="literal">true</span>) {</span><br><span class="line">        cout&lt;&lt;<span class="string">"shilin:"</span> &lt;&lt; Xiao_jing &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="string">"can"</span> &lt;&lt; <span class="string">" "</span>&lt;&lt;Liu_bo&lt;&lt;<span class="string">" "</span> &lt;&lt; <span class="string">"be your boyfiend"</span> &lt;&lt; endl;</span><br><span class="line">        cout&lt;&lt;<span class="string">"xiaojing:"</span>&lt;&lt;<span class="string">"yes"</span>&lt;&lt;endl;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        cout&lt;&lt;<span class="string">"I wish you happiness"</span>&lt;&lt;endl;&gt;</span><br><span class="line">    }</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span>{</span><br><span class="line">    <span class="comment">//把你的选择是true，还是false填入下面（）中</span></span><br><span class="line">    <span class="built_in">I_want_say</span>();</span><br><span class="line">    <span class="comment">//退出这份选择考虑再2，因为真的用了心</span></span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>这就是我想对你说的话，代码简单，心蛮真哈哈</strong></p><p>❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀❀</p>]]></content>
      
      
      <categories>
          
          <category> 我的青春 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>过去</title>
      <link href="/2023/01/14/%E4%BD%A0/"/>
      <url>/2023/01/14/%E4%BD%A0/</url>
      
        <content type="html"><![CDATA[<h5 id="我心里的那个女孩"><a href="#我心里的那个女孩" class="headerlink" title="我心里的那个女孩"></a>我心里的那个女孩</h5><p>  或许我会忘记我们的很多细节了，时间会冲淡很多东西，但是，<code>杨诗琦</code>这个名字真的会毕生难忘，这个女孩是我的青春，更是像很多人一样，留在青春的遗憾，不知道未来会这么样，但是至少在目前看来是这样的。</p><p><a href="chushi.jpg"></a></p><p>XHR，Fetch<br>用户代理<br>浏览器能力：<br>自动发送请求的能力<br>自动解析</p><p>如果使用了<img> <vedio> <audio> <script> <css>都是自动调用form请求<br>用户点击了页面刷新，就会发送一个新的请求</p><p>重点；<br>浏览器的约定<br>当发送了GET请求时候，浏览器不会带上请求体，任何请求体都会被干掉<br>服务器看得到你的请求体，但是不会理会，只是协议上允许GET发送请求体</p><p>浏览器对行头的大小是有限制的，但是http协议没有固定规定<br>get请求放在行里面的，所有是由规定大小的，但是post请求放在体里面是没有限制大小的<br>URL地址编码，会把”阿斯克“字符，浏览器地址栏显示中文，其实计算机内部传输的是URL地址编码</p><p>get请求方便分享页面，但是post请求不便于分享数据，分享出去请求体没有分享出去<br>post请求数据不会保存在浏览器的</p><h3 id="自动解析响应的能力"><a href="#自动解析响应的能力" class="headerlink" title="自动解析响应的能力"></a>自动解析响应的能力</h3><p>XHR 和 Feach 两个都属于ajax的<br>ajax是调用浏览器的一个模板<br>var xhr = new XMLHTTPRequest();<br>xhr.open();<br>xhr.setRequest();<br>xhr.send();</p><p>js 代码执行，浏览器必须卡死，不能动其他的东西<br>js 的promise的东西</p><p>程序报错：<br>可预料，一定要处理的<br>不可预料，服务器宕机，断网等</p><p>token 令牌<br>出入证就是一种token令牌，</p><p>发送请求的时候就是要设置一个令牌：<br>Authorization: //这个令牌地址不一定，看开发过程中后端要放在哪里</p><p>http协议是一种无状态的协议</p><p>第三节课的内容</p><p>同源策略：<br>就是一套安全机制<br>同源策略对同源资源开放，对<br>两个URL地址完全相同，就是同源，否则就是异元<br>（前端的代码对用户是可见的，前端是不做加密的）<br>验证码不要写前端</p><p>跨源三种场景<br>网络通信：<br>a元素跳跃，加载css，js，图片，ajax等等<br>JS API<br>window.open  window.parent  iframe.contentWindow等等<br>存储<br>WebStorage IndexedDB 等</p><p>同源请求没有任何限制</p><p>跨域的前提条件：在浏览器里面发起的请求才会有跨域问题，“同源”就是浏览器搞出来的<br>脱离了浏览器就没有跨域的问题</p><p>跨域不一定引发问题<br>CORS<br>JSONP<br>代理</p><p>get 和 post 区别<br>根据RFC7231规定，get和post只是请求行的第一个单词，只是表达了不同的语义</p><p>服务器是程序，计算机是物理设备<br>很多bug就是在开发环境没有什么问题，但是一到生产环境（一般指linux）就会出现很多问题<br>这个一般就是代理出的问题<br>生产环境是没有话语的<br>原则：就是跟生产环境保持一致</p></script></audio></vedio></p>]]></content>
      
      
      <categories>
          
          <category> 我的青春 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端网络</title>
      <link href="/2023/01/14/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/01/14/%E5%89%8D%E7%AB%AF%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p><strong>学习要点</strong>：</p><ul><li>明白网络在计算机中发挥的作用，分层模型</li><li>使用<code>Ajax</code>做基本操作，</li><li>计算机网络中跨域问题</li></ul><h4 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h4><p><strong>理论的重要性</strong><br>开发过程找不到bug，原因就是理论不牢找不到问题<br>网络部分的理论是非常多而复杂，<br>实践操作的目的就是去理解理论知识点<br>网络解决的问题是两个程序之间交换数据</p><p>[TOC] <strong>分层模型</strong><br>每层相对独立，只解决自己的问题<br>每层无需考虑上层的交付<br>每层有多种解决方案<br>在上一层基础上加上点东西</p><p><strong>五层模型</strong><br><font color="#0099ff">应用层</font>，应用具体消息<strong>格式</strong>（协议就是一个标准）<br><font color="#0099ff">传输层</font>，如何保证消息<strong>可靠传送</strong><br><font color="#0099ff">网络层</font>，就是如何在网络中找到对方 <strong>IP</strong>（目前通讯地址可变） 路由器<br><font color="#0099ff">数据链路层</font>，如何在一个子网中找到对方 <strong>Mac</strong> （身份证号不可变） 交换机<br><font color="#0099ff">物理层</font>，上面给我的东西我要用什么<strong>信号表述</strong></p><p>—<em>国际OSI七层模型就是在应用层和传输层加多一个表示层和会话层</em>—</p><p>[toc]UML用于定位网络<font color="#0099ff"> 服务 </font>，就是一个<strong>字符串</strong><br>URL（uniform resource locator，统一资源定位符）用于定位网络服务</p><p><img src="http://mdrs.yuanjin.tech/img/202301121041726.png" alt="image-20230112104100679"></p><p>URL是一个固定格式的字符串<br><em>表示形式</em></p><p><img src="http://mdrs.yuanjin.tech/img/202301121029498.png" alt="URL流程表示图"></p><p>它表达了：</p><p>从网络中<font color="#0099ff">哪台计算机（domain）</font>中的<font color="#0099ff">哪个程序（port）</font>寻找<font color="#0099ff">哪个服务（path）</font>，并注明了获取服务的<font color="#0099ff">具体细节（path）</font>，以及要用什么样的<font color="#0099ff">协议通信（schema）</font></p><!-- http默认端口：80 ，https默认端口：443没有写路径的时候，就是最后面会有一个斜杠，就是默认地址https://www.baidu.com/不然浏览器也会默认加上一个/ --><ul><li>当协议是<code>http</code>端口为<code>80</code>时，端口可以省略</li><li>当协议是<code>https</code>端口为<code>443</code>时，端口可以省略</li><li><code>schema</code>、<code>domain</code>、<code>path</code>是必填的，其他的根据具体的要求填写</li></ul><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><ul><li>传递消息的<font color="#0099ff">模式</font></li><li>传递消息的<font color="#0099ff">格式</font><br><em>发起者是客户端client，接收者是服务器server（<strong>舔狗和女神</strong>）</em></li><li>格式<br>请求行Line      客户端发送的是纯文本<br>请求头Header<br>请求体Body</li></ul><p>请求方式 post（提交） / get（获取） / delete（删除） / put（修改）</p><blockquote><p>使用情况：<br><font color="#0099ff">获取</font>数据一般使用<code>GET</code><br><font color="#0099ff">提交</font>数据一般使用<code>POST</code><br>各种<font color="#0099ff">静态资源</font>的获取，一般使用<code>GET</code></p></blockquote><h5 id="请求方法之间只有语义的区别"><a href="#请求方法之间只有语义的区别" class="headerlink" title="请求方法之间只有语义的区别"></a>请求方法之间<strong>只有</strong>语义的区别</h5><h4 id="请求头：host"><a href="#请求头：host" class="headerlink" title="请求头：host"></a>请求头：host</h4><p>可以定义一种请求格式，官方没有特定要求<br><code>Host</code>标注了<code>URL</code>地址中的<code>Domain + Port</code><br>示例：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOST:study.baidu.com</span><br></pre></td></tr></tbody></table></figure><h4 id="请求头：Content-Type"><a href="#请求头：Content-Type" class="headerlink" title="请求头：Content-Type"></a>请求头：Content-Type</h4><p>比如，请求体的数据为<code>loginId:admin, loginPwd:123456</code>，请求体可以用不同的格式发出</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">loginId=admin&amp;loginPwd=123123</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">{ "loginId": "admin", "loginPwd": "123123" }</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryraPtlntBIqy4X2Ho</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryraPtlntBIqy4X2Ho</span><br><span class="line">Content-Disposition: form-data; name="loginId"</span><br><span class="line"></span><br><span class="line">admin</span><br><span class="line">------WebKitFormBoundaryraPtlntBIqy4X2Ho</span><br><span class="line">Content-Disposition: form-data; name="loginPwd"</span><br><span class="line"></span><br><span class="line">123456</span><br><span class="line">------WebKitFormBoundaryraPtlntBIqy4X2Ho--</span><br></pre></td></tr></tbody></table></figure><p><code>Content-Type</code>标注了附带的响应体是什么格式<br>常见的值有：</p><ol><li><code>text/plain</code>: 普通的纯文本</li><li><code>text/html</code>：html文档</li><li><code>text/javascript</code> 或 <code>application/javascript</code>：js代码</li><li><code>text/css</code>：css代码</li><li><code>image/jpeg</code>：jpg图片</li><li><code>attachment</code>：附件</li><li>其他<code>MIME</code>类型<br>tip：<br>这个没有固定标准</li></ol><h4 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h4><p>常用的响应码：<br><img src="http://mdrs.yuanjin.tech/img/202301121310570.png" alt="响应码标识"></p><ul><li><p><strong>200 OK：一切正常。</strong></p></li><li><p><strong>301 Moved Permanently：资源已被永久重定向。</strong></p><p> <code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我已经永远的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了响应头的Location中了</code></p><blockquote><p>试试请求：<a href="http://www.douyutv.com/">www.douyutv.com</a></p></blockquote></li><li><p><strong>302 Found：资源已被临时重定向。</strong></p><p> <code>你的请求我收到了，但是呢，你要的东西不在这个地址了，我临时的把它移动到了一个新的地址，麻烦你取请求新的地址，地址我放到了请求头的Location中了</code></p></li><li><p><strong>304 Not Modified：文档内容未被修改。</strong></p><p> <code>你的请求我收到了，你要的东西跟之前是一样的，没有任何的变化，所以我就不给你结果了，你自己就用以前的吧。啥？你没有缓存以前的内容，关我啥事</code></p></li><li><p><strong>400 Bad Request：语义有误，当前请求无法被服务器理解。</strong></p><p> <code>服务器无法解析请求报文</code></p></li><li><p>403 Forbidden：服务器拒绝执行。**</p><p> <code>服务器不给东西给你</code></p></li><li><p><strong>404 Not Found：资源不存在。</strong></p><p> <code>你的请求我收到了，但我没有你要的东西</code></p></li><li><p><strong>500 Internal Server Error：服务器内部错误。</strong></p><p> <code>你的请求我已收到，但这道题我不会，解不出来，先睡了</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>technology</title>
      <link href="/2023/01/13/technology/"/>
      <url>/2023/01/13/technology/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cpp-1</title>
      <link href="/2023/01/13/cpp-1/"/>
      <url>/2023/01/13/cpp-1/</url>
      
        <content type="html"><![CDATA[<h2 id="nihao"><a href="#nihao" class="headerlink" title="nihao"></a>nihao</h2>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Cherno-cpp-1</title>
      <link href="/2023/01/13/Cherno-cpp-1/"/>
      <url>/2023/01/13/Cherno-cpp-1/</url>
      
        <content type="html"><![CDATA[<p>####cpp and Memerey</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cherno cpp 讲解</title>
      <link href="/2023/01/13/cherno-cpp-2/"/>
      <url>/2023/01/13/cherno-cpp-2/</url>
      
        <content type="html"><![CDATA[<h2 id="good"><a href="#good" class="headerlink" title="good"></a>good</h2>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> name </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Make you first blog</title>
      <link href="/2023/01/11/My-first-blog/"/>
      <url>/2023/01/11/My-first-blog/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>hexo</code>是一个静态博客搭建框架，由 javaScript 实现，所以要调用到js服务端的node环境，与之相同的有：<br><code>hugo</code> (go语言实现的框架，大量信息情况下速度比hexo快)<br>除了静态博客框架，还有<code>WordPress</code>动态博客框架，可以放置到服务器根据用户需求注册账户等服务器端操作</p><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p><u>默认git，node，npm镜像配置完成</u><br>创建一个 blog 文件夹存放博客文件<br>首先要安装 <code>node npm</code> 两个服务<br>使用 npm 全局安装 <code>hexo-cli</code> 服务</p><p>###基本 hexo 命令使用<br><code>hexo init</code><strong>初始化</strong> hexo 文件，给定基础配置<br><code>hexo s</code> (start)<strong>启动</strong>本地博客，默认端口号: <code>localhost:4000</code><br><code>hexo n</code> (new)<strong>创建</strong>一个新的博客文章<br><code>hexo clean</code> (清理)写完博客文章后，<strong>清理数据</strong><br><code>hexo g</code> (刷新)对数据进行<strong>刷新</strong><br><code>hexo d</code> <strong>提交</strong>到github仓库<br><code>hexo new page </code><strong>创建page</strong>，就是创建一个新文件夹<br><code>hexo new fileName</code><strong>创建文件</strong>,文件创建在<code>/sourse/_post</code>下</p><h3 id="部署到-github-仓库"><a href="#部署到-github-仓库" class="headerlink" title="部署到 github 仓库"></a>部署到 github 仓库</h3><p>1.在自己的 github 上面<em>搭建一个仓库</em>，注意：<code>仓库名要是自己的用户名.github.io </code><br>2.使用 npm 装一个 git <em>部署插件</em> 命令：<code>npm install -g -save hexo-deployer-git </code><br>3.<em>修改配置</em> _config.yml 文件的 deploy：</p><blockquote><p>type: git<br>repo: github仓库http地址<br>branch: masten  (指向空指针的意思) </p></blockquote><p>Tip：<br>如果显示 <code>not fround git</code> 说明插件没安装好,再次尝试安装<br>window 电脑不需要再使用 github 用户密码登陆，直接推到远端<br>但是 linux 和 unix 相反</p><h3 id="修改主题，进行自定义"><a href="#修改主题，进行自定义" class="headerlink" title="修改主题，进行自定义"></a>修改主题，进行自定义</h3><p><code>clone</code> 上面的主题到：<code>/themes</code>里面<br>修改主题文件还是 _config.yml 内：</p><blockquote><p>theme：landspace(修改)<br>剩下的看文档介绍自定义主题</p></blockquote><h4 id="hexo框架操作注意："><a href="#hexo框架操作注意：" class="headerlink" title="hexo框架操作注意："></a>hexo框架操作注意：</h4><ul><li>window系统要安装git</li></ul><ul><li>必须是通过hexo命令创建的文件才可以被使用</li><li>我使用的是<code>hexo-theme-matery</code>主题，该主题分类关键字在页面中的<code>category</code>，在<code>_config.yml</code> 文件中配置命名，<code>/fileName/name/</code>fileName是用hexo命令创建的</li><li>我所使用主题下分类基本都在“分类”栏下，</li><li>hexo生成文件不可以直接修改文件名称</li></ul><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p>@CodeSheep<br>@fi3ework</p>]]></content>
      
      
      <categories>
          
          <category> 工具技术 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
